/**
 * Created by IntelliJ IDEA.
 * User: erez
 * Date: Jun 16, 2009
 * Time: 12:03:46 AM
 * To change this template use File | Settings | File Templates.
 * <p/>
 * <p/>
 * <p/>
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p/>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p/>
 * Let us list the factors of the first seven triangle numbers:
 * <p/>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 36: 1,2,3,6,9,12,18,36
 * 45: 1,2,5,9,45
 * 55: 1,5,11,55
 * 66: 1,2,3,6,11,22,33,66
 * 78:
 * 91
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p/>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problems12 {

    /*


    Twenty-four has 8 divisors, namely 1,2,3,4,6,8,12 and 24. I have to
    find a relationship between the integer, N, and the total number of
    its divisors, d(N). I have found that every prime number will have 2
    divisors, every integer which is the square of a prime will have 3
    divisors, every integer which is a cube of a prime number will have 4
    divisors, etc. Building on this, I've also found that every number can
    be expressed uniquely as the product of primes and that there is a
    relationship between the exponents of the primes and d(N). For
    example,

         24 = 2^(3)*3^(1)

    therefore, d(24) = (3 + 1)(1 + 1) = 8.
     */
    public static void main(String[] args)
    {
        search();

    }

    public static void search()
    {
        //the n'th number = (n^2+n)/2
        //Tn+Tn-1 = n^2
        //  int div = 1;
        for (int i = 1; i < 99999; i++)
        {
            long n = (i * i + i) / 2;

            System.out.print("T[" + i + "]  " + n + " 1,");
            int fac = 2;
            int pDiv = 1;
            int divM = 1;
            int allDiv = divM;
            long num = n;
            while (n > 1)
            {
                if (n % fac == 0)
                {
                    n /= fac;
                    System.out.print(fac + "");

                    while (n % fac == 0)
                    {
                        System.out.print("*");
                        divM++;
                        n /= fac;
                    }
                    allDiv = (divM + 1) * allDiv;
                    divM = 1;

                    pDiv++;
                    System.out.print(",");
                }
                fac++;
            }

            System.out.print(num);
            System.out.print("  prime factors [" + pDiv + "]");
            System.out.print(" N factors=" + allDiv);
            System.out.println("");

            if (allDiv > 500)
            {
                break;
            }

        }
    }


}
